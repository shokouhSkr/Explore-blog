// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}




model Post {
  id          String @id @default(cuid()) @map("_id")
  createdAt   DateTime @default(now())
  slug        String @unique
  title       String
  description String?
  image       String?
  views       Int    @default(0)
  catSlug     String
  category    Category? @relation(fields: [catSlug], references: [slug]) 
  userEmail   String
  user        User @relation(fields:[userEmail], references: [email])
  comments    Comment[]
  body        String? 
  translation PostTranslation[]
}

model PostTranslation {
  id          String   @id @default(cuid()) @map("_id")
  title       String?
  description String?
  body        String?
  post        Post?     @relation(fields: [postId], references: [id])
  postId      String
  catSlug     String?
  slug        String?
}

model Category {
  id          String @id @default(cuid()) @map("_id")
  slug        String @unique
  title       String
  image       String?
  description String?
  posts       Post[] // to get these related data: include:{Posts:true}
  translation CategoryTranslation[]
}
model CategoryTranslation {
  id          String     @id @default(cuid()) @map("_id")
  title       String?
  description String?
  category    Category?  @relation(fields: [categoryId], references: [id])
  categoryId  String?
}

model Comment {
  id           String @id @default(cuid()) @map("_id")
  createdAt    DateTime @default(now())
  description  String?
  userEmail    String
  user         User @relation(fields:[userEmail], references: [email])
  postSlug     String
  post         Post  @relation(fields:[postSlug], references: [slug])
}

model Message {
  id           String @id @default(cuid()) @map("_id")
  createdAt    DateTime @default(now())
  name         String?
  email        String?
  message      String?
}

model Email {
  id           String @id @default(cuid()) @map("_id")
  createdAt    DateTime @default(now())
  email        String?
}